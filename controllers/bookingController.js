const Booking = require("../models/Booking");
const Ticket = require("../models/Ticket");
const Showtime = require("../models/Showtime");

// üìå 1. T·∫°o ƒë·∫∑t v√©
exports.createBooking = async (req, res) => {
    try {
        const { userId, showtimeId, movieId, theaterId, seats, totalPrice } = req.body;

        // Ki·ªÉm tra su·∫•t chi·∫øu
        const showtime = await Showtime.findById(showtimeId);
        if (!showtime) {
            return res.status(404).json({ message: "Showtime not found!" });
        }

        // Ki·ªÉm tra gh·∫ø c√≥ b·ªã ƒë·∫∑t tr∆∞·ªõc ƒë√≥ kh√¥ng
        const alreadyBooked = seats.filter(seat => showtime.bookedSeats.includes(seat));
        if (alreadyBooked.length > 0) {
            return res.status(400).json({ message: `Seats ${alreadyBooked.join(", ")} are already booked!` });
        }

        // üîπ T·∫°o booking tr∆∞·ªõc
        const newBooking = new Booking({
            user: userId,
            showtime: showtimeId,
            movie: movieId,
            theater: theaterId,
            totalPrice,
            tickets: [] // Ban ƒë·∫ßu r·ªóng, l√°t n·ªØa c·∫≠p nh·∫≠t l·∫°i
        });

        const savedBooking = await newBooking.save();

        // üîπ T·∫°o danh s√°ch v√©
        const tickets = seats.map(seat => ({
            booking: savedBooking._id,
            user: userId,
            movie: movieId,
            showtime: showtimeId,
            theater: theaterId,
            seatNumber: seat,
            ticketPrice: showtime.price,
            totalPrice: showtime.price, // T·ªïng gi√° v√© cho 1 ch·ªó ng·ªìi
            paymentStatus: "pending",
        }));

        // üîπ L∆∞u v√© v√†o DB
        const savedTickets = await Ticket.insertMany(tickets);

        // üîπ C·∫≠p nh·∫≠t danh s√°ch `tickets` trong `booking`
        await Booking.findByIdAndUpdate(savedBooking._id, {
            $set: { tickets: savedTickets.map(ticket => ticket._id) }
        });

        // üîπ C·∫≠p nh·∫≠t tr·∫°ng th√°i gh·∫ø trong `Showtime`
        await Showtime.findByIdAndUpdate(showtimeId, {
            $pull: { availableSeats: { $in: seats } },  // X√≥a kh·ªèi danh s√°ch gh·∫ø tr·ªëng
            $push: { bookedSeats: { $each: seats } }  // Th√™m v√†o danh s√°ch gh·∫ø ƒë√£ ƒë·∫∑t
        });

        res.status(201).json({
            message: "Ticket booking successful!",
            booking: { ...savedBooking._doc, tickets: savedTickets.map(ticket => ticket._id) }, // ƒê√≠nh k√®m danh s√°ch v√©
            tickets: savedTickets
        });
    } catch (error) {
        res.status(500).json({ message: "Server error!", error });
    }
};


// üìå 2. L·∫•y chi ti·∫øt ƒë·∫∑t v√©
exports.getBookingById = async (req, res) => {
    try {
        const booking = await Booking.findById(req.params.id)
            .populate("user")
            .populate("movie")
            .populate("theater")
            .populate("showtime")
            .populate("tickets");

        if (!booking) return res.status(404).json({ message: "No booking found!" });

        res.json(booking);
    } catch (error) {
        res.status(500).json({ message: "Server error!", error });
    }
};

// üìå 3. L·∫•y danh s√°ch gh·∫ø ƒë√£ ƒë·∫∑t theo su·∫•t chi·∫øu
exports.getBookedSeatsByShowtime = async (req, res) => {
    try {
        const showtime = await Showtime.findById(req.params.showtimeId);
        if (!showtime) return res.status(404).json({ message: "Showtime not found!" });

        res.json(showtime.bookedSeats);
    } catch (error) {
        res.status(500).json({ message: "Server error!", error });
    }
};


// üìå 4. X√°c nh·∫≠n thanh to√°n ƒë·∫∑t v√©
exports.payForBooking = async (req, res) => {
    try {
        const booking = await Booking.findById(req.params.id);
        if (!booking) return res.status(404).json({ message: "No booking found!" });

        // Ki·ªÉm tra n·∫øu v√© ƒë√£ ƒë∆∞·ª£c thanh to√°n
        if (booking.paymentStatus === "paid") {
            return res.status(400).json({ message: "This booking has already been paid!" });
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n
        booking.paymentStatus = "paid";
        await booking.save();

        // C·∫≠p nh·∫≠t t·∫•t c·∫£ v√© thu·ªôc booking n√†y th√†nh "paid"
        await Ticket.updateMany({ booking: booking._id }, { $set: { paymentStatus: "paid" } });

        res.json({ message: "Payment successful!", booking });
    } catch (error) {
        res.status(500).json({ message: "Server error!", error });
    }
};
exports.cancelBooking = async (req, res) => {
    try {
        const booking = await Booking.findById(req.params.id);
        if (!booking) return res.status(404).json({ message: "No booking found!" });

        // L·∫•y danh s√°ch v√© t·ª´ booking
        const tickets = await Ticket.find({ booking: booking._id });

        // L·∫•y danh s√°ch gh·∫ø c·∫ßn ho√†n l·∫°i
        const seatsToRelease = tickets.map(ticket => ticket.seatNumber);

        // X√≥a v√©
        await Ticket.deleteMany({ booking: booking._id });

        // X√≥a ƒë·∫∑t v√©
        await Booking.findByIdAndDelete(req.params.id);

        // C·∫≠p nh·∫≠t l·∫°i danh s√°ch gh·∫ø trong Showtime
        await Showtime.findByIdAndUpdate(booking.showtime, {
            $pull: { bookedSeats: { $in: seatsToRelease } },  // X√≥a kh·ªèi gh·∫ø ƒë√£ ƒë·∫∑t
            $push: { availableSeats: { $each: seatsToRelease } }  // Th√™m l·∫°i v√†o gh·∫ø tr·ªëng
        });

        res.json({ message: "Booking canceled and seats are now available again!" });
    } catch (error) {
        res.status(500).json({ message: "Server error!", error });
    }
};
